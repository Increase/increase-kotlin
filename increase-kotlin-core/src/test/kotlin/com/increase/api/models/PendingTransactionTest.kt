package com.increase.api.models

import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

class PendingTransactionTest {

    @Test
    fun createPendingTransaction() {
        val pendingTransaction =
            PendingTransaction.builder()
                .accountId("string")
                .amount(123L)
                .currency(PendingTransaction.Currency.CAD)
                .completedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .description("string")
                .id("string")
                .routeId("string")
                .routeType(PendingTransaction.RouteType.ACCOUNT_NUMBER)
                .source(
                    PendingTransaction.Source.builder()
                        .category(PendingTransaction.Source.Category.ACCOUNT_TRANSFER_INSTRUCTION)
                        .accountTransferInstruction(
                            PendingTransaction.Source.AccountTransferInstruction.builder()
                                .amount(123L)
                                .currency(
                                    PendingTransaction.Source.AccountTransferInstruction.Currency
                                        .CAD
                                )
                                .transferId("string")
                                .build()
                        )
                        .achTransferInstruction(
                            PendingTransaction.Source.AchTransferInstruction.builder()
                                .amount(123L)
                                .transferId("string")
                                .build()
                        )
                        .cardAuthorization(
                            PendingTransaction.Source.CardAuthorization.builder()
                                .id("string")
                                .merchantAcceptorId("string")
                                .merchantDescriptor("string")
                                .merchantCategoryCode("string")
                                .merchantCity("string")
                                .merchantCountry("string")
                                .network(PendingTransaction.Source.CardAuthorization.Network.VISA)
                                .networkDetails(
                                    PendingTransaction.Source.CardAuthorization.NetworkDetails
                                        .builder()
                                        .visa(
                                            PendingTransaction.Source.CardAuthorization
                                                .NetworkDetails
                                                .Visa
                                                .builder()
                                                .electronicCommerceIndicator(
                                                    PendingTransaction.Source.CardAuthorization
                                                        .NetworkDetails
                                                        .Visa
                                                        .ElectronicCommerceIndicator
                                                        .MAIL_PHONE_ORDER
                                                )
                                                .pointOfServiceEntryMode(
                                                    PointOfServiceEntryMode.MANUAL
                                                )
                                                .build()
                                        )
                                        .build()
                                )
                                .amount(123L)
                                .currency(PendingTransaction.Source.CardAuthorization.Currency.CAD)
                                .realTimeDecisionId("string")
                                .digitalWalletTokenId("string")
                                .pendingTransactionId("string")
                                .type(
                                    PendingTransaction.Source.CardAuthorization.Type
                                        .CARD_AUTHORIZATION
                                )
                                .build()
                        )
                        .checkDepositInstruction(
                            PendingTransaction.Source.CheckDepositInstruction.builder()
                                .amount(123L)
                                .currency(
                                    PendingTransaction.Source.CheckDepositInstruction.Currency.CAD
                                )
                                .frontImageFileId("string")
                                .backImageFileId("string")
                                .checkDepositId("string")
                                .build()
                        )
                        .checkTransferInstruction(
                            PendingTransaction.Source.CheckTransferInstruction.builder()
                                .amount(123L)
                                .currency(
                                    PendingTransaction.Source.CheckTransferInstruction.Currency.CAD
                                )
                                .transferId("string")
                                .build()
                        )
                        .inboundFundsHold(
                            PendingTransaction.Source.InboundFundsHold.builder()
                                .amount(123L)
                                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .currency(PendingTransaction.Source.InboundFundsHold.Currency.CAD)
                                .automaticallyReleasesAt(
                                    OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                                )
                                .releasedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .status(PendingTransaction.Source.InboundFundsHold.Status.HELD)
                                .heldTransactionId("string")
                                .pendingTransactionId("string")
                                .build()
                        )
                        .cardRouteAuthorization(
                            PendingTransaction.Source.CardRouteAuthorization.builder()
                                .amount(123L)
                                .currency(
                                    PendingTransaction.Source.CardRouteAuthorization.Currency.CAD
                                )
                                .merchantAcceptorId("string")
                                .merchantCity("string")
                                .merchantCountry("string")
                                .merchantDescriptor("string")
                                .merchantCategoryCode("string")
                                .merchantState("string")
                                .build()
                        )
                        .realTimePaymentsTransferInstruction(
                            PendingTransaction.Source.RealTimePaymentsTransferInstruction.builder()
                                .amount(123L)
                                .transferId("string")
                                .build()
                        )
                        .wireDrawdownPaymentInstruction(
                            PendingTransaction.Source.WireDrawdownPaymentInstruction.builder()
                                .amount(123L)
                                .accountNumber("string")
                                .routingNumber("string")
                                .messageToRecipient("string")
                                .build()
                        )
                        .wireTransferInstruction(
                            PendingTransaction.Source.WireTransferInstruction.builder()
                                .amount(123L)
                                .accountNumber("string")
                                .routingNumber("string")
                                .messageToRecipient("string")
                                .transferId("string")
                                .build()
                        )
                        .build()
                )
                .status(PendingTransaction.Status.PENDING)
                .type(PendingTransaction.Type.PENDING_TRANSACTION)
                .build()
        assertThat(pendingTransaction).isNotNull
        assertThat(pendingTransaction.accountId()).isEqualTo("string")
        assertThat(pendingTransaction.amount()).isEqualTo(123L)
        assertThat(pendingTransaction.currency()).isEqualTo(PendingTransaction.Currency.CAD)
        assertThat(pendingTransaction.completedAt())
            .isEqualTo(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(pendingTransaction.createdAt())
            .isEqualTo(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(pendingTransaction.description()).isEqualTo("string")
        assertThat(pendingTransaction.id()).isEqualTo("string")
        assertThat(pendingTransaction.routeId()).isEqualTo("string")
        assertThat(pendingTransaction.routeType())
            .isEqualTo(PendingTransaction.RouteType.ACCOUNT_NUMBER)
        assertThat(pendingTransaction.source())
            .isEqualTo(
                PendingTransaction.Source.builder()
                    .category(PendingTransaction.Source.Category.ACCOUNT_TRANSFER_INSTRUCTION)
                    .accountTransferInstruction(
                        PendingTransaction.Source.AccountTransferInstruction.builder()
                            .amount(123L)
                            .currency(
                                PendingTransaction.Source.AccountTransferInstruction.Currency.CAD
                            )
                            .transferId("string")
                            .build()
                    )
                    .achTransferInstruction(
                        PendingTransaction.Source.AchTransferInstruction.builder()
                            .amount(123L)
                            .transferId("string")
                            .build()
                    )
                    .cardAuthorization(
                        PendingTransaction.Source.CardAuthorization.builder()
                            .id("string")
                            .merchantAcceptorId("string")
                            .merchantDescriptor("string")
                            .merchantCategoryCode("string")
                            .merchantCity("string")
                            .merchantCountry("string")
                            .network(PendingTransaction.Source.CardAuthorization.Network.VISA)
                            .networkDetails(
                                PendingTransaction.Source.CardAuthorization.NetworkDetails.builder()
                                    .visa(
                                        PendingTransaction.Source.CardAuthorization.NetworkDetails
                                            .Visa
                                            .builder()
                                            .electronicCommerceIndicator(
                                                PendingTransaction.Source.CardAuthorization
                                                    .NetworkDetails
                                                    .Visa
                                                    .ElectronicCommerceIndicator
                                                    .MAIL_PHONE_ORDER
                                            )
                                            .pointOfServiceEntryMode(PointOfServiceEntryMode.MANUAL)
                                            .build()
                                    )
                                    .build()
                            )
                            .amount(123L)
                            .currency(PendingTransaction.Source.CardAuthorization.Currency.CAD)
                            .realTimeDecisionId("string")
                            .digitalWalletTokenId("string")
                            .pendingTransactionId("string")
                            .type(
                                PendingTransaction.Source.CardAuthorization.Type.CARD_AUTHORIZATION
                            )
                            .build()
                    )
                    .checkDepositInstruction(
                        PendingTransaction.Source.CheckDepositInstruction.builder()
                            .amount(123L)
                            .currency(
                                PendingTransaction.Source.CheckDepositInstruction.Currency.CAD
                            )
                            .frontImageFileId("string")
                            .backImageFileId("string")
                            .checkDepositId("string")
                            .build()
                    )
                    .checkTransferInstruction(
                        PendingTransaction.Source.CheckTransferInstruction.builder()
                            .amount(123L)
                            .currency(
                                PendingTransaction.Source.CheckTransferInstruction.Currency.CAD
                            )
                            .transferId("string")
                            .build()
                    )
                    .inboundFundsHold(
                        PendingTransaction.Source.InboundFundsHold.builder()
                            .amount(123L)
                            .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .currency(PendingTransaction.Source.InboundFundsHold.Currency.CAD)
                            .automaticallyReleasesAt(
                                OffsetDateTime.parse("2019-12-27T18:11:19.117Z")
                            )
                            .releasedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .status(PendingTransaction.Source.InboundFundsHold.Status.HELD)
                            .heldTransactionId("string")
                            .pendingTransactionId("string")
                            .build()
                    )
                    .cardRouteAuthorization(
                        PendingTransaction.Source.CardRouteAuthorization.builder()
                            .amount(123L)
                            .currency(PendingTransaction.Source.CardRouteAuthorization.Currency.CAD)
                            .merchantAcceptorId("string")
                            .merchantCity("string")
                            .merchantCountry("string")
                            .merchantDescriptor("string")
                            .merchantCategoryCode("string")
                            .merchantState("string")
                            .build()
                    )
                    .realTimePaymentsTransferInstruction(
                        PendingTransaction.Source.RealTimePaymentsTransferInstruction.builder()
                            .amount(123L)
                            .transferId("string")
                            .build()
                    )
                    .wireDrawdownPaymentInstruction(
                        PendingTransaction.Source.WireDrawdownPaymentInstruction.builder()
                            .amount(123L)
                            .accountNumber("string")
                            .routingNumber("string")
                            .messageToRecipient("string")
                            .build()
                    )
                    .wireTransferInstruction(
                        PendingTransaction.Source.WireTransferInstruction.builder()
                            .amount(123L)
                            .accountNumber("string")
                            .routingNumber("string")
                            .messageToRecipient("string")
                            .transferId("string")
                            .build()
                    )
                    .build()
            )
        assertThat(pendingTransaction.status()).isEqualTo(PendingTransaction.Status.PENDING)
        assertThat(pendingTransaction.type()).isEqualTo(PendingTransaction.Type.PENDING_TRANSACTION)
    }
}
