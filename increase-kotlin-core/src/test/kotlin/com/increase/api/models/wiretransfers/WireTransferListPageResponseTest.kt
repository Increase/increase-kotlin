// File generated from our OpenAPI spec by Stainless.

package com.increase.api.models.wiretransfers

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.increase.api.core.jsonMapper
import java.time.LocalDate
import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class WireTransferListPageResponseTest {

    @Test
    fun create() {
        val wireTransferListPageResponse =
            WireTransferListPageResponse.builder()
                .addData(
                    WireTransfer.builder()
                        .id("wire_transfer_5akynk7dqsq25qwk9q2u")
                        .accountId("account_in71c4amph0vgo2qllky")
                        .accountNumber("987654321")
                        .amount(100L)
                        .approval(
                            WireTransfer.Approval.builder()
                                .approvedAt(OffsetDateTime.parse("2020-01-31T23:59:59Z"))
                                .approvedBy(null)
                                .build()
                        )
                        .beneficiaryAddressLine1(null)
                        .beneficiaryAddressLine2(null)
                        .beneficiaryAddressLine3(null)
                        .beneficiaryName(null)
                        .cancellation(
                            WireTransfer.Cancellation.builder()
                                .canceledAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .canceledBy("canceled_by")
                                .build()
                        )
                        .createdAt(OffsetDateTime.parse("2020-01-31T23:59:59Z"))
                        .createdBy(
                            WireTransfer.CreatedBy.builder()
                                .apiKey(
                                    WireTransfer.CreatedBy.ApiKey.builder()
                                        .description("description")
                                        .build()
                                )
                                .category(WireTransfer.CreatedBy.Category.USER)
                                .oauthApplication(
                                    WireTransfer.CreatedBy.OAuthApplication.builder()
                                        .name("name")
                                        .build()
                                )
                                .user(
                                    WireTransfer.CreatedBy.User.builder()
                                        .email("user@example.com")
                                        .build()
                                )
                                .build()
                        )
                        .currency(WireTransfer.Currency.USD)
                        .externalAccountId("external_account_ukk55lr923a3ac0pp7iv")
                        .idempotencyKey(null)
                        .inboundWireDrawdownRequestId(null)
                        .messageToRecipient("Message to recipient")
                        .network(WireTransfer.Network.WIRE)
                        .originatorAddressLine1(null)
                        .originatorAddressLine2(null)
                        .originatorAddressLine3(null)
                        .originatorName(null)
                        .pendingTransactionId(null)
                        .remittance(
                            WireTransfer.Remittance.builder()
                                .category(WireTransfer.Remittance.Category.UNSTRUCTURED)
                                .tax(
                                    WireTransfer.Remittance.Tax.builder()
                                        .date(LocalDate.parse("2019-12-27"))
                                        .identificationNumber("identification_number")
                                        .typeCode("type_code")
                                        .build()
                                )
                                .unstructured(
                                    WireTransfer.Remittance.Unstructured.builder()
                                        .message("Payment for invoice 12345")
                                        .build()
                                )
                                .build()
                        )
                        .reversal(
                            WireTransfer.Reversal.builder()
                                .amount(0L)
                                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .debtorRoutingNumber("debtor_routing_number")
                                .description("description")
                                .inputCycleDate(LocalDate.parse("2019-12-27"))
                                .inputMessageAccountabilityData("input_message_accountability_data")
                                .inputSequenceNumber("input_sequence_number")
                                .inputSource("input_source")
                                .instructionIdentification("instruction_identification")
                                .returnReasonAdditionalInformation(
                                    "return_reason_additional_information"
                                )
                                .returnReasonCode("return_reason_code")
                                .returnReasonCodeDescription("return_reason_code_description")
                                .transactionId("transaction_id")
                                .wireTransferId("wire_transfer_id")
                                .build()
                        )
                        .routingNumber("101050001")
                        .sourceAccountNumberId(null)
                        .status(WireTransfer.Status.COMPLETE)
                        .submission(
                            WireTransfer.Submission.builder()
                                .inputMessageAccountabilityData("input_message_accountability_data")
                                .submittedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .build()
                        )
                        .transactionId("transaction_uyrp7fld2ium70oa7oi")
                        .type(WireTransfer.Type.WIRE_TRANSFER)
                        .build()
                )
                .nextCursor("v57w5d")
                .build()

        assertThat(wireTransferListPageResponse.data())
            .containsExactly(
                WireTransfer.builder()
                    .id("wire_transfer_5akynk7dqsq25qwk9q2u")
                    .accountId("account_in71c4amph0vgo2qllky")
                    .accountNumber("987654321")
                    .amount(100L)
                    .approval(
                        WireTransfer.Approval.builder()
                            .approvedAt(OffsetDateTime.parse("2020-01-31T23:59:59Z"))
                            .approvedBy(null)
                            .build()
                    )
                    .beneficiaryAddressLine1(null)
                    .beneficiaryAddressLine2(null)
                    .beneficiaryAddressLine3(null)
                    .beneficiaryName(null)
                    .cancellation(
                        WireTransfer.Cancellation.builder()
                            .canceledAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .canceledBy("canceled_by")
                            .build()
                    )
                    .createdAt(OffsetDateTime.parse("2020-01-31T23:59:59Z"))
                    .createdBy(
                        WireTransfer.CreatedBy.builder()
                            .apiKey(
                                WireTransfer.CreatedBy.ApiKey.builder()
                                    .description("description")
                                    .build()
                            )
                            .category(WireTransfer.CreatedBy.Category.USER)
                            .oauthApplication(
                                WireTransfer.CreatedBy.OAuthApplication.builder()
                                    .name("name")
                                    .build()
                            )
                            .user(
                                WireTransfer.CreatedBy.User.builder()
                                    .email("user@example.com")
                                    .build()
                            )
                            .build()
                    )
                    .currency(WireTransfer.Currency.USD)
                    .externalAccountId("external_account_ukk55lr923a3ac0pp7iv")
                    .idempotencyKey(null)
                    .inboundWireDrawdownRequestId(null)
                    .messageToRecipient("Message to recipient")
                    .network(WireTransfer.Network.WIRE)
                    .originatorAddressLine1(null)
                    .originatorAddressLine2(null)
                    .originatorAddressLine3(null)
                    .originatorName(null)
                    .pendingTransactionId(null)
                    .remittance(
                        WireTransfer.Remittance.builder()
                            .category(WireTransfer.Remittance.Category.UNSTRUCTURED)
                            .tax(
                                WireTransfer.Remittance.Tax.builder()
                                    .date(LocalDate.parse("2019-12-27"))
                                    .identificationNumber("identification_number")
                                    .typeCode("type_code")
                                    .build()
                            )
                            .unstructured(
                                WireTransfer.Remittance.Unstructured.builder()
                                    .message("Payment for invoice 12345")
                                    .build()
                            )
                            .build()
                    )
                    .reversal(
                        WireTransfer.Reversal.builder()
                            .amount(0L)
                            .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .debtorRoutingNumber("debtor_routing_number")
                            .description("description")
                            .inputCycleDate(LocalDate.parse("2019-12-27"))
                            .inputMessageAccountabilityData("input_message_accountability_data")
                            .inputSequenceNumber("input_sequence_number")
                            .inputSource("input_source")
                            .instructionIdentification("instruction_identification")
                            .returnReasonAdditionalInformation(
                                "return_reason_additional_information"
                            )
                            .returnReasonCode("return_reason_code")
                            .returnReasonCodeDescription("return_reason_code_description")
                            .transactionId("transaction_id")
                            .wireTransferId("wire_transfer_id")
                            .build()
                    )
                    .routingNumber("101050001")
                    .sourceAccountNumberId(null)
                    .status(WireTransfer.Status.COMPLETE)
                    .submission(
                        WireTransfer.Submission.builder()
                            .inputMessageAccountabilityData("input_message_accountability_data")
                            .submittedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .build()
                    )
                    .transactionId("transaction_uyrp7fld2ium70oa7oi")
                    .type(WireTransfer.Type.WIRE_TRANSFER)
                    .build()
            )
        assertThat(wireTransferListPageResponse.nextCursor()).isEqualTo("v57w5d")
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val wireTransferListPageResponse =
            WireTransferListPageResponse.builder()
                .addData(
                    WireTransfer.builder()
                        .id("wire_transfer_5akynk7dqsq25qwk9q2u")
                        .accountId("account_in71c4amph0vgo2qllky")
                        .accountNumber("987654321")
                        .amount(100L)
                        .approval(
                            WireTransfer.Approval.builder()
                                .approvedAt(OffsetDateTime.parse("2020-01-31T23:59:59Z"))
                                .approvedBy(null)
                                .build()
                        )
                        .beneficiaryAddressLine1(null)
                        .beneficiaryAddressLine2(null)
                        .beneficiaryAddressLine3(null)
                        .beneficiaryName(null)
                        .cancellation(
                            WireTransfer.Cancellation.builder()
                                .canceledAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .canceledBy("canceled_by")
                                .build()
                        )
                        .createdAt(OffsetDateTime.parse("2020-01-31T23:59:59Z"))
                        .createdBy(
                            WireTransfer.CreatedBy.builder()
                                .apiKey(
                                    WireTransfer.CreatedBy.ApiKey.builder()
                                        .description("description")
                                        .build()
                                )
                                .category(WireTransfer.CreatedBy.Category.USER)
                                .oauthApplication(
                                    WireTransfer.CreatedBy.OAuthApplication.builder()
                                        .name("name")
                                        .build()
                                )
                                .user(
                                    WireTransfer.CreatedBy.User.builder()
                                        .email("user@example.com")
                                        .build()
                                )
                                .build()
                        )
                        .currency(WireTransfer.Currency.USD)
                        .externalAccountId("external_account_ukk55lr923a3ac0pp7iv")
                        .idempotencyKey(null)
                        .inboundWireDrawdownRequestId(null)
                        .messageToRecipient("Message to recipient")
                        .network(WireTransfer.Network.WIRE)
                        .originatorAddressLine1(null)
                        .originatorAddressLine2(null)
                        .originatorAddressLine3(null)
                        .originatorName(null)
                        .pendingTransactionId(null)
                        .remittance(
                            WireTransfer.Remittance.builder()
                                .category(WireTransfer.Remittance.Category.UNSTRUCTURED)
                                .tax(
                                    WireTransfer.Remittance.Tax.builder()
                                        .date(LocalDate.parse("2019-12-27"))
                                        .identificationNumber("identification_number")
                                        .typeCode("type_code")
                                        .build()
                                )
                                .unstructured(
                                    WireTransfer.Remittance.Unstructured.builder()
                                        .message("Payment for invoice 12345")
                                        .build()
                                )
                                .build()
                        )
                        .reversal(
                            WireTransfer.Reversal.builder()
                                .amount(0L)
                                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .debtorRoutingNumber("debtor_routing_number")
                                .description("description")
                                .inputCycleDate(LocalDate.parse("2019-12-27"))
                                .inputMessageAccountabilityData("input_message_accountability_data")
                                .inputSequenceNumber("input_sequence_number")
                                .inputSource("input_source")
                                .instructionIdentification("instruction_identification")
                                .returnReasonAdditionalInformation(
                                    "return_reason_additional_information"
                                )
                                .returnReasonCode("return_reason_code")
                                .returnReasonCodeDescription("return_reason_code_description")
                                .transactionId("transaction_id")
                                .wireTransferId("wire_transfer_id")
                                .build()
                        )
                        .routingNumber("101050001")
                        .sourceAccountNumberId(null)
                        .status(WireTransfer.Status.COMPLETE)
                        .submission(
                            WireTransfer.Submission.builder()
                                .inputMessageAccountabilityData("input_message_accountability_data")
                                .submittedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .build()
                        )
                        .transactionId("transaction_uyrp7fld2ium70oa7oi")
                        .type(WireTransfer.Type.WIRE_TRANSFER)
                        .build()
                )
                .nextCursor("v57w5d")
                .build()

        val roundtrippedWireTransferListPageResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(wireTransferListPageResponse),
                jacksonTypeRef<WireTransferListPageResponse>(),
            )

        assertThat(roundtrippedWireTransferListPageResponse).isEqualTo(wireTransferListPageResponse)
    }
}
