package com.increase.api.models

import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

class CheckTransferTest {

    @Test
    fun createCheckTransfer() {
        val checkTransfer =
            CheckTransfer.builder()
                .accountId("string")
                .addressLine1("string")
                .addressLine2("string")
                .addressCity("string")
                .addressState("string")
                .addressZip("string")
                .returnAddress(
                    CheckTransfer.ReturnAddress.builder()
                        .name("string")
                        .line1("string")
                        .line2("string")
                        .city("string")
                        .state("string")
                        .zip("string")
                        .build()
                )
                .amount(123L)
                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .currency(CheckTransfer.Currency.CAD)
                .id("string")
                .mailedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .message("string")
                .note("string")
                .recipientName("string")
                .status(CheckTransfer.Status.PENDING_APPROVAL)
                .submittedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .submission(CheckTransfer.Submission.builder().checkNumber("string").build())
                .transactionId("string")
                .stopPaymentRequest(
                    CheckTransfer.StopPaymentRequest.builder()
                        .transferId("string")
                        .transactionId("string")
                        .requestedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .type(
                            CheckTransfer.StopPaymentRequest.Type
                                .CHECK_TRANSFER_STOP_PAYMENT_REQUEST
                        )
                        .build()
                )
                .deposit(
                    CheckTransfer.Deposit.builder()
                        .frontImageFileId("string")
                        .backImageFileId("string")
                        .type(CheckTransfer.Deposit.Type.CHECK_TRANSFER_DEPOSIT)
                        .build()
                )
                .returnDetails(
                    CheckTransfer.ReturnDetails.builder()
                        .transferId("string")
                        .fileId("string")
                        .reason(CheckTransfer.ReturnDetails.Reason.MAIL_DELIVERY_FAILURE)
                        .build()
                )
                .type(CheckTransfer.Type.CHECK_TRANSFER)
                .build()
        assertThat(checkTransfer).isNotNull
        assertThat(checkTransfer.accountId()).isEqualTo("string")
        assertThat(checkTransfer.addressLine1()).isEqualTo("string")
        assertThat(checkTransfer.addressLine2()).isEqualTo("string")
        assertThat(checkTransfer.addressCity()).isEqualTo("string")
        assertThat(checkTransfer.addressState()).isEqualTo("string")
        assertThat(checkTransfer.addressZip()).isEqualTo("string")
        assertThat(checkTransfer.returnAddress())
            .isEqualTo(
                CheckTransfer.ReturnAddress.builder()
                    .name("string")
                    .line1("string")
                    .line2("string")
                    .city("string")
                    .state("string")
                    .zip("string")
                    .build()
            )
        assertThat(checkTransfer.amount()).isEqualTo(123L)
        assertThat(checkTransfer.createdAt())
            .isEqualTo(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(checkTransfer.currency()).isEqualTo(CheckTransfer.Currency.CAD)
        assertThat(checkTransfer.id()).isEqualTo("string")
        assertThat(checkTransfer.mailedAt())
            .isEqualTo(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(checkTransfer.message()).isEqualTo("string")
        assertThat(checkTransfer.note()).isEqualTo("string")
        assertThat(checkTransfer.recipientName()).isEqualTo("string")
        assertThat(checkTransfer.status()).isEqualTo(CheckTransfer.Status.PENDING_APPROVAL)
        assertThat(checkTransfer.submittedAt())
            .isEqualTo(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(checkTransfer.submission())
            .isEqualTo(CheckTransfer.Submission.builder().checkNumber("string").build())
        assertThat(checkTransfer.transactionId()).isEqualTo("string")
        assertThat(checkTransfer.stopPaymentRequest())
            .isEqualTo(
                CheckTransfer.StopPaymentRequest.builder()
                    .transferId("string")
                    .transactionId("string")
                    .requestedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .type(CheckTransfer.StopPaymentRequest.Type.CHECK_TRANSFER_STOP_PAYMENT_REQUEST)
                    .build()
            )
        assertThat(checkTransfer.deposit())
            .isEqualTo(
                CheckTransfer.Deposit.builder()
                    .frontImageFileId("string")
                    .backImageFileId("string")
                    .type(CheckTransfer.Deposit.Type.CHECK_TRANSFER_DEPOSIT)
                    .build()
            )
        assertThat(checkTransfer.returnDetails())
            .isEqualTo(
                CheckTransfer.ReturnDetails.builder()
                    .transferId("string")
                    .fileId("string")
                    .reason(CheckTransfer.ReturnDetails.Reason.MAIL_DELIVERY_FAILURE)
                    .build()
            )
        assertThat(checkTransfer.type()).isEqualTo(CheckTransfer.Type.CHECK_TRANSFER)
    }
}
