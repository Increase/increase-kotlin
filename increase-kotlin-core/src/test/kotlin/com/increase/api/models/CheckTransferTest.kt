package com.increase.api.models

import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

class CheckTransferTest {

    @Test
    fun createCheckTransfer() {
        val checkTransfer =
            CheckTransfer.builder()
                .id("string")
                .accountId("string")
                .accountNumber("string")
                .amount(123L)
                .approval(
                    CheckTransfer.Approval.builder()
                        .approvedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .approvedBy("string")
                        .build()
                )
                .cancellation(
                    CheckTransfer.Cancellation.builder()
                        .canceledAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .canceledBy("string")
                        .build()
                )
                .checkNumber("string")
                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .currency(CheckTransfer.Currency.CAD)
                .deposit(
                    CheckTransfer.Deposit.builder()
                        .backImageFileId("string")
                        .bankOfFirstDepositRoutingNumber("string")
                        .depositedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .frontImageFileId("string")
                        .transactionId("string")
                        .type(CheckTransfer.Deposit.Type.CHECK_TRANSFER_DEPOSIT)
                        .build()
                )
                .fulfillmentMethod(CheckTransfer.FulfillmentMethod.PHYSICAL_CHECK)
                .mailing(
                    CheckTransfer.Mailing.builder()
                        .imageId("string")
                        .mailedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .build()
                )
                .pendingTransactionId("string")
                .physicalCheck(
                    CheckTransfer.PhysicalCheck.builder()
                        .mailingAddress(
                            CheckTransfer.PhysicalCheck.MailingAddress.builder()
                                .city("string")
                                .line1("string")
                                .line2("string")
                                .name("string")
                                .postalCode("string")
                                .state("string")
                                .build()
                        )
                        .memo("string")
                        .note("string")
                        .recipientName("string")
                        .returnAddress(
                            CheckTransfer.PhysicalCheck.ReturnAddress.builder()
                                .city("string")
                                .line1("string")
                                .line2("string")
                                .name("string")
                                .postalCode("string")
                                .state("string")
                                .build()
                        )
                        .build()
                )
                .routingNumber("string")
                .sourceAccountNumberId("string")
                .status(CheckTransfer.Status.PENDING_APPROVAL)
                .stopPaymentRequest(
                    CheckTransfer.StopPaymentRequest.builder()
                        .reason(CheckTransfer.StopPaymentRequest.Reason.MAIL_DELIVERY_FAILED)
                        .requestedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .transferId("string")
                        .type(
                            CheckTransfer.StopPaymentRequest.Type
                                .CHECK_TRANSFER_STOP_PAYMENT_REQUEST
                        )
                        .build()
                )
                .submission(
                    CheckTransfer.Submission.builder()
                        .submittedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .build()
                )
                .type(CheckTransfer.Type.CHECK_TRANSFER)
                .uniqueIdentifier("string")
                .build()
        assertThat(checkTransfer).isNotNull
        assertThat(checkTransfer.id()).isEqualTo("string")
        assertThat(checkTransfer.accountId()).isEqualTo("string")
        assertThat(checkTransfer.accountNumber()).isEqualTo("string")
        assertThat(checkTransfer.amount()).isEqualTo(123L)
        assertThat(checkTransfer.approval())
            .isEqualTo(
                CheckTransfer.Approval.builder()
                    .approvedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .approvedBy("string")
                    .build()
            )
        assertThat(checkTransfer.cancellation())
            .isEqualTo(
                CheckTransfer.Cancellation.builder()
                    .canceledAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .canceledBy("string")
                    .build()
            )
        assertThat(checkTransfer.checkNumber()).isEqualTo("string")
        assertThat(checkTransfer.createdAt())
            .isEqualTo(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(checkTransfer.currency()).isEqualTo(CheckTransfer.Currency.CAD)
        assertThat(checkTransfer.deposit())
            .isEqualTo(
                CheckTransfer.Deposit.builder()
                    .backImageFileId("string")
                    .bankOfFirstDepositRoutingNumber("string")
                    .depositedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .frontImageFileId("string")
                    .transactionId("string")
                    .type(CheckTransfer.Deposit.Type.CHECK_TRANSFER_DEPOSIT)
                    .build()
            )
        assertThat(checkTransfer.fulfillmentMethod())
            .isEqualTo(CheckTransfer.FulfillmentMethod.PHYSICAL_CHECK)
        assertThat(checkTransfer.mailing())
            .isEqualTo(
                CheckTransfer.Mailing.builder()
                    .imageId("string")
                    .mailedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .build()
            )
        assertThat(checkTransfer.pendingTransactionId()).isEqualTo("string")
        assertThat(checkTransfer.physicalCheck())
            .isEqualTo(
                CheckTransfer.PhysicalCheck.builder()
                    .mailingAddress(
                        CheckTransfer.PhysicalCheck.MailingAddress.builder()
                            .city("string")
                            .line1("string")
                            .line2("string")
                            .name("string")
                            .postalCode("string")
                            .state("string")
                            .build()
                    )
                    .memo("string")
                    .note("string")
                    .recipientName("string")
                    .returnAddress(
                        CheckTransfer.PhysicalCheck.ReturnAddress.builder()
                            .city("string")
                            .line1("string")
                            .line2("string")
                            .name("string")
                            .postalCode("string")
                            .state("string")
                            .build()
                    )
                    .build()
            )
        assertThat(checkTransfer.routingNumber()).isEqualTo("string")
        assertThat(checkTransfer.sourceAccountNumberId()).isEqualTo("string")
        assertThat(checkTransfer.status()).isEqualTo(CheckTransfer.Status.PENDING_APPROVAL)
        assertThat(checkTransfer.stopPaymentRequest())
            .isEqualTo(
                CheckTransfer.StopPaymentRequest.builder()
                    .reason(CheckTransfer.StopPaymentRequest.Reason.MAIL_DELIVERY_FAILED)
                    .requestedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .transferId("string")
                    .type(CheckTransfer.StopPaymentRequest.Type.CHECK_TRANSFER_STOP_PAYMENT_REQUEST)
                    .build()
            )
        assertThat(checkTransfer.submission())
            .isEqualTo(
                CheckTransfer.Submission.builder()
                    .submittedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .build()
            )
        assertThat(checkTransfer.type()).isEqualTo(CheckTransfer.Type.CHECK_TRANSFER)
        assertThat(checkTransfer.uniqueIdentifier()).isEqualTo("string")
    }
}
