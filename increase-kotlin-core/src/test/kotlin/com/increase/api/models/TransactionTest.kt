// File generated from our OpenAPI spec by Stainless.

package com.increase.api.models

import java.time.LocalDate
import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

class TransactionTest {

    @Test
    fun createTransaction() {
        val transaction =
            Transaction.builder()
                .id("id")
                .accountId("account_id")
                .amount(123L)
                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .currency(Transaction.Currency.CAD)
                .description("description")
                .routeId("route_id")
                .routeType(Transaction.RouteType.ACCOUNT_NUMBER)
                .source(
                    Transaction.Source.builder()
                        .accountTransferIntention(
                            Transaction.Source.AccountTransferIntention.builder()
                                .amount(123L)
                                .currency(Transaction.Source.AccountTransferIntention.Currency.CAD)
                                .description("description")
                                .destinationAccountId("destination_account_id")
                                .sourceAccountId("source_account_id")
                                .transferId("transfer_id")
                                .build()
                        )
                        .achTransferIntention(
                            Transaction.Source.AchTransferIntention.builder()
                                .accountNumber("account_number")
                                .amount(123L)
                                .routingNumber("routing_number")
                                .statementDescriptor("statement_descriptor")
                                .transferId("transfer_id")
                                .build()
                        )
                        .achTransferRejection(
                            Transaction.Source.AchTransferRejection.builder()
                                .transferId("transfer_id")
                                .build()
                        )
                        .achTransferReturn(
                            Transaction.Source.AchTransferReturn.builder()
                                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .rawReturnReasonCode("raw_return_reason_code")
                                .returnReasonCode(
                                    Transaction.Source.AchTransferReturn.ReturnReasonCode
                                        .INSUFFICIENT_FUND
                                )
                                .traceNumber("trace_number")
                                .transactionId("transaction_id")
                                .transferId("transfer_id")
                                .build()
                        )
                        .cardDisputeAcceptance(
                            Transaction.Source.CardDisputeAcceptance.builder()
                                .acceptedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .cardDisputeId("card_dispute_id")
                                .transactionId("transaction_id")
                                .build()
                        )
                        .cardDisputeLoss(
                            Transaction.Source.CardDisputeLoss.builder()
                                .cardDisputeId("card_dispute_id")
                                .explanation("explanation")
                                .lostAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .transactionId("transaction_id")
                                .build()
                        )
                        .cardRefund(
                            Transaction.Source.CardRefund.builder()
                                .id("id")
                                .amount(123L)
                                .cardPaymentId("card_payment_id")
                                .currency(Transaction.Source.CardRefund.Currency.CAD)
                                .merchantAcceptorId("merchant_acceptor_id")
                                .merchantCategoryCode("merchant_category_code")
                                .merchantCity("merchant_city")
                                .merchantCountry("merchant_country")
                                .merchantName("merchant_name")
                                .merchantState("merchant_state")
                                .networkIdentifiers(
                                    Transaction.Source.CardRefund.NetworkIdentifiers.builder()
                                        .acquirerBusinessId("acquirer_business_id")
                                        .acquirerReferenceNumber("acquirer_reference_number")
                                        .transactionId("transaction_id")
                                        .build()
                                )
                                .presentmentAmount(123L)
                                .presentmentCurrency("presentment_currency")
                                .purchaseDetails(
                                    Transaction.Source.CardRefund.PurchaseDetails.builder()
                                        .carRental(
                                            Transaction.Source.CardRefund.PurchaseDetails.CarRental
                                                .builder()
                                                .carClassCode("car_class_code")
                                                .checkoutDate(LocalDate.parse("2019-12-27"))
                                                .dailyRentalRateAmount(123L)
                                                .dailyRentalRateCurrency(
                                                    "daily_rental_rate_currency"
                                                )
                                                .daysRented(123L)
                                                .extraCharges(
                                                    Transaction.Source.CardRefund.PurchaseDetails
                                                        .CarRental
                                                        .ExtraCharges
                                                        .NO_EXTRA_CHARGE
                                                )
                                                .fuelChargesAmount(123L)
                                                .fuelChargesCurrency("fuel_charges_currency")
                                                .insuranceChargesAmount(123L)
                                                .insuranceChargesCurrency(
                                                    "insurance_charges_currency"
                                                )
                                                .noShowIndicator(
                                                    Transaction.Source.CardRefund.PurchaseDetails
                                                        .CarRental
                                                        .NoShowIndicator
                                                        .NOT_APPLICABLE
                                                )
                                                .oneWayDropOffChargesAmount(123L)
                                                .oneWayDropOffChargesCurrency(
                                                    "one_way_drop_off_charges_currency"
                                                )
                                                .renterName("renter_name")
                                                .weeklyRentalRateAmount(123L)
                                                .weeklyRentalRateCurrency(
                                                    "weekly_rental_rate_currency"
                                                )
                                                .build()
                                        )
                                        .customerReferenceIdentifier(
                                            "customer_reference_identifier"
                                        )
                                        .localTaxAmount(123L)
                                        .localTaxCurrency("local_tax_currency")
                                        .lodging(
                                            Transaction.Source.CardRefund.PurchaseDetails.Lodging
                                                .builder()
                                                .checkInDate(LocalDate.parse("2019-12-27"))
                                                .dailyRoomRateAmount(123L)
                                                .dailyRoomRateCurrency("daily_room_rate_currency")
                                                .extraCharges(
                                                    Transaction.Source.CardRefund.PurchaseDetails
                                                        .Lodging
                                                        .ExtraCharges
                                                        .NO_EXTRA_CHARGE
                                                )
                                                .folioCashAdvancesAmount(123L)
                                                .folioCashAdvancesCurrency(
                                                    "folio_cash_advances_currency"
                                                )
                                                .foodBeverageChargesAmount(123L)
                                                .foodBeverageChargesCurrency(
                                                    "food_beverage_charges_currency"
                                                )
                                                .noShowIndicator(
                                                    Transaction.Source.CardRefund.PurchaseDetails
                                                        .Lodging
                                                        .NoShowIndicator
                                                        .NOT_APPLICABLE
                                                )
                                                .prepaidExpensesAmount(123L)
                                                .prepaidExpensesCurrency(
                                                    "prepaid_expenses_currency"
                                                )
                                                .roomNights(123L)
                                                .totalRoomTaxAmount(123L)
                                                .totalRoomTaxCurrency("total_room_tax_currency")
                                                .totalTaxAmount(123L)
                                                .totalTaxCurrency("total_tax_currency")
                                                .build()
                                        )
                                        .nationalTaxAmount(123L)
                                        .nationalTaxCurrency("national_tax_currency")
                                        .purchaseIdentifier("purchase_identifier")
                                        .purchaseIdentifierFormat(
                                            Transaction.Source.CardRefund.PurchaseDetails
                                                .PurchaseIdentifierFormat
                                                .FREE_TEXT
                                        )
                                        .travel(
                                            Transaction.Source.CardRefund.PurchaseDetails.Travel
                                                .builder()
                                                .ancillary(
                                                    Transaction.Source.CardRefund.PurchaseDetails
                                                        .Travel
                                                        .Ancillary
                                                        .builder()
                                                        .connectedTicketDocumentNumber(
                                                            "connected_ticket_document_number"
                                                        )
                                                        .creditReasonIndicator(
                                                            Transaction.Source.CardRefund
                                                                .PurchaseDetails
                                                                .Travel
                                                                .Ancillary
                                                                .CreditReasonIndicator
                                                                .NO_CREDIT
                                                        )
                                                        .passengerNameOrDescription(
                                                            "passenger_name_or_description"
                                                        )
                                                        .services(
                                                            listOf(
                                                                Transaction.Source.CardRefund
                                                                    .PurchaseDetails
                                                                    .Travel
                                                                    .Ancillary
                                                                    .Service
                                                                    .builder()
                                                                    .category(
                                                                        Transaction.Source
                                                                            .CardRefund
                                                                            .PurchaseDetails
                                                                            .Travel
                                                                            .Ancillary
                                                                            .Service
                                                                            .Category
                                                                            .NONE
                                                                    )
                                                                    .subCategory("sub_category")
                                                                    .build()
                                                            )
                                                        )
                                                        .ticketDocumentNumber(
                                                            "ticket_document_number"
                                                        )
                                                        .build()
                                                )
                                                .computerizedReservationSystem(
                                                    "computerized_reservation_system"
                                                )
                                                .creditReasonIndicator(
                                                    Transaction.Source.CardRefund.PurchaseDetails
                                                        .Travel
                                                        .CreditReasonIndicator
                                                        .NO_CREDIT
                                                )
                                                .departureDate(LocalDate.parse("2019-12-27"))
                                                .originationCityAirportCode(
                                                    "origination_city_airport_code"
                                                )
                                                .passengerName("passenger_name")
                                                .restrictedTicketIndicator(
                                                    Transaction.Source.CardRefund.PurchaseDetails
                                                        .Travel
                                                        .RestrictedTicketIndicator
                                                        .NO_RESTRICTIONS
                                                )
                                                .ticketChangeIndicator(
                                                    Transaction.Source.CardRefund.PurchaseDetails
                                                        .Travel
                                                        .TicketChangeIndicator
                                                        .NONE
                                                )
                                                .ticketNumber("ticket_number")
                                                .travelAgencyCode("travel_agency_code")
                                                .travelAgencyName("travel_agency_name")
                                                .tripLegs(
                                                    listOf(
                                                        Transaction.Source.CardRefund
                                                            .PurchaseDetails
                                                            .Travel
                                                            .TripLeg
                                                            .builder()
                                                            .carrierCode("carrier_code")
                                                            .destinationCityAirportCode(
                                                                "destination_city_airport_code"
                                                            )
                                                            .fareBasisCode("fare_basis_code")
                                                            .flightNumber("flight_number")
                                                            .serviceClass("service_class")
                                                            .stopOverCode(
                                                                Transaction.Source.CardRefund
                                                                    .PurchaseDetails
                                                                    .Travel
                                                                    .TripLeg
                                                                    .StopOverCode
                                                                    .NONE
                                                            )
                                                            .build()
                                                    )
                                                )
                                                .build()
                                        )
                                        .build()
                                )
                                .transactionId("transaction_id")
                                .type(Transaction.Source.CardRefund.Type.CARD_REFUND)
                                .build()
                        )
                        .cardRevenuePayment(
                            Transaction.Source.CardRevenuePayment.builder()
                                .amount(123L)
                                .currency(Transaction.Source.CardRevenuePayment.Currency.CAD)
                                .periodEnd(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .periodStart(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .transactedOnAccountId("transacted_on_account_id")
                                .build()
                        )
                        .cardSettlement(
                            Transaction.Source.CardSettlement.builder()
                                .id("id")
                                .amount(123L)
                                .cardAuthorization("card_authorization")
                                .cardPaymentId("card_payment_id")
                                .currency(Transaction.Source.CardSettlement.Currency.CAD)
                                .merchantAcceptorId("merchant_acceptor_id")
                                .merchantCategoryCode("merchant_category_code")
                                .merchantCity("merchant_city")
                                .merchantCountry("merchant_country")
                                .merchantName("merchant_name")
                                .merchantState("merchant_state")
                                .networkIdentifiers(
                                    Transaction.Source.CardSettlement.NetworkIdentifiers.builder()
                                        .acquirerBusinessId("acquirer_business_id")
                                        .acquirerReferenceNumber("acquirer_reference_number")
                                        .transactionId("transaction_id")
                                        .build()
                                )
                                .pendingTransactionId("pending_transaction_id")
                                .presentmentAmount(123L)
                                .presentmentCurrency("presentment_currency")
                                .purchaseDetails(
                                    Transaction.Source.CardSettlement.PurchaseDetails.builder()
                                        .carRental(
                                            Transaction.Source.CardSettlement.PurchaseDetails
                                                .CarRental
                                                .builder()
                                                .carClassCode("car_class_code")
                                                .checkoutDate(LocalDate.parse("2019-12-27"))
                                                .dailyRentalRateAmount(123L)
                                                .dailyRentalRateCurrency(
                                                    "daily_rental_rate_currency"
                                                )
                                                .daysRented(123L)
                                                .extraCharges(
                                                    Transaction.Source.CardSettlement
                                                        .PurchaseDetails
                                                        .CarRental
                                                        .ExtraCharges
                                                        .NO_EXTRA_CHARGE
                                                )
                                                .fuelChargesAmount(123L)
                                                .fuelChargesCurrency("fuel_charges_currency")
                                                .insuranceChargesAmount(123L)
                                                .insuranceChargesCurrency(
                                                    "insurance_charges_currency"
                                                )
                                                .noShowIndicator(
                                                    Transaction.Source.CardSettlement
                                                        .PurchaseDetails
                                                        .CarRental
                                                        .NoShowIndicator
                                                        .NOT_APPLICABLE
                                                )
                                                .oneWayDropOffChargesAmount(123L)
                                                .oneWayDropOffChargesCurrency(
                                                    "one_way_drop_off_charges_currency"
                                                )
                                                .renterName("renter_name")
                                                .weeklyRentalRateAmount(123L)
                                                .weeklyRentalRateCurrency(
                                                    "weekly_rental_rate_currency"
                                                )
                                                .build()
                                        )
                                        .customerReferenceIdentifier(
                                            "customer_reference_identifier"
                                        )
                                        .localTaxAmount(123L)
                                        .localTaxCurrency("local_tax_currency")
                                        .lodging(
                                            Transaction.Source.CardSettlement.PurchaseDetails
                                                .Lodging
                                                .builder()
                                                .checkInDate(LocalDate.parse("2019-12-27"))
                                                .dailyRoomRateAmount(123L)
                                                .dailyRoomRateCurrency("daily_room_rate_currency")
                                                .extraCharges(
                                                    Transaction.Source.CardSettlement
                                                        .PurchaseDetails
                                                        .Lodging
                                                        .ExtraCharges
                                                        .NO_EXTRA_CHARGE
                                                )
                                                .folioCashAdvancesAmount(123L)
                                                .folioCashAdvancesCurrency(
                                                    "folio_cash_advances_currency"
                                                )
                                                .foodBeverageChargesAmount(123L)
                                                .foodBeverageChargesCurrency(
                                                    "food_beverage_charges_currency"
                                                )
                                                .noShowIndicator(
                                                    Transaction.Source.CardSettlement
                                                        .PurchaseDetails
                                                        .Lodging
                                                        .NoShowIndicator
                                                        .NOT_APPLICABLE
                                                )
                                                .prepaidExpensesAmount(123L)
                                                .prepaidExpensesCurrency(
                                                    "prepaid_expenses_currency"
                                                )
                                                .roomNights(123L)
                                                .totalRoomTaxAmount(123L)
                                                .totalRoomTaxCurrency("total_room_tax_currency")
                                                .totalTaxAmount(123L)
                                                .totalTaxCurrency("total_tax_currency")
                                                .build()
                                        )
                                        .nationalTaxAmount(123L)
                                        .nationalTaxCurrency("national_tax_currency")
                                        .purchaseIdentifier("purchase_identifier")
                                        .purchaseIdentifierFormat(
                                            Transaction.Source.CardSettlement.PurchaseDetails
                                                .PurchaseIdentifierFormat
                                                .FREE_TEXT
                                        )
                                        .travel(
                                            Transaction.Source.CardSettlement.PurchaseDetails.Travel
                                                .builder()
                                                .ancillary(
                                                    Transaction.Source.CardSettlement
                                                        .PurchaseDetails
                                                        .Travel
                                                        .Ancillary
                                                        .builder()
                                                        .connectedTicketDocumentNumber(
                                                            "connected_ticket_document_number"
                                                        )
                                                        .creditReasonIndicator(
                                                            Transaction.Source.CardSettlement
                                                                .PurchaseDetails
                                                                .Travel
                                                                .Ancillary
                                                                .CreditReasonIndicator
                                                                .NO_CREDIT
                                                        )
                                                        .passengerNameOrDescription(
                                                            "passenger_name_or_description"
                                                        )
                                                        .services(
                                                            listOf(
                                                                Transaction.Source.CardSettlement
                                                                    .PurchaseDetails
                                                                    .Travel
                                                                    .Ancillary
                                                                    .Service
                                                                    .builder()
                                                                    .category(
                                                                        Transaction.Source
                                                                            .CardSettlement
                                                                            .PurchaseDetails
                                                                            .Travel
                                                                            .Ancillary
                                                                            .Service
                                                                            .Category
                                                                            .NONE
                                                                    )
                                                                    .subCategory("sub_category")
                                                                    .build()
                                                            )
                                                        )
                                                        .ticketDocumentNumber(
                                                            "ticket_document_number"
                                                        )
                                                        .build()
                                                )
                                                .computerizedReservationSystem(
                                                    "computerized_reservation_system"
                                                )
                                                .creditReasonIndicator(
                                                    Transaction.Source.CardSettlement
                                                        .PurchaseDetails
                                                        .Travel
                                                        .CreditReasonIndicator
                                                        .NO_CREDIT
                                                )
                                                .departureDate(LocalDate.parse("2019-12-27"))
                                                .originationCityAirportCode(
                                                    "origination_city_airport_code"
                                                )
                                                .passengerName("passenger_name")
                                                .restrictedTicketIndicator(
                                                    Transaction.Source.CardSettlement
                                                        .PurchaseDetails
                                                        .Travel
                                                        .RestrictedTicketIndicator
                                                        .NO_RESTRICTIONS
                                                )
                                                .ticketChangeIndicator(
                                                    Transaction.Source.CardSettlement
                                                        .PurchaseDetails
                                                        .Travel
                                                        .TicketChangeIndicator
                                                        .NONE
                                                )
                                                .ticketNumber("ticket_number")
                                                .travelAgencyCode("travel_agency_code")
                                                .travelAgencyName("travel_agency_name")
                                                .tripLegs(
                                                    listOf(
                                                        Transaction.Source.CardSettlement
                                                            .PurchaseDetails
                                                            .Travel
                                                            .TripLeg
                                                            .builder()
                                                            .carrierCode("carrier_code")
                                                            .destinationCityAirportCode(
                                                                "destination_city_airport_code"
                                                            )
                                                            .fareBasisCode("fare_basis_code")
                                                            .flightNumber("flight_number")
                                                            .serviceClass("service_class")
                                                            .stopOverCode(
                                                                Transaction.Source.CardSettlement
                                                                    .PurchaseDetails
                                                                    .Travel
                                                                    .TripLeg
                                                                    .StopOverCode
                                                                    .NONE
                                                            )
                                                            .build()
                                                    )
                                                )
                                                .build()
                                        )
                                        .build()
                                )
                                .transactionId("transaction_id")
                                .type(Transaction.Source.CardSettlement.Type.CARD_SETTLEMENT)
                                .build()
                        )
                        .cashbackPayment(
                            Transaction.Source.CashbackPayment.builder()
                                .accruedOnCardId("accrued_on_card_id")
                                .amount(123L)
                                .currency(Transaction.Source.CashbackPayment.Currency.CAD)
                                .periodEnd(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .periodStart(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .build()
                        )
                        .category(Transaction.Source.Category.ACCOUNT_TRANSFER_INTENTION)
                        .checkDepositAcceptance(
                            Transaction.Source.CheckDepositAcceptance.builder()
                                .accountNumber("account_number")
                                .amount(123L)
                                .auxiliaryOnUs("auxiliary_on_us")
                                .checkDepositId("check_deposit_id")
                                .currency(Transaction.Source.CheckDepositAcceptance.Currency.CAD)
                                .routingNumber("routing_number")
                                .serialNumber("serial_number")
                                .build()
                        )
                        .checkDepositReturn(
                            Transaction.Source.CheckDepositReturn.builder()
                                .amount(123L)
                                .checkDepositId("check_deposit_id")
                                .currency(Transaction.Source.CheckDepositReturn.Currency.CAD)
                                .returnReason(
                                    Transaction.Source.CheckDepositReturn.ReturnReason
                                        .ACH_CONVERSION_NOT_SUPPORTED
                                )
                                .returnedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .transactionId("transaction_id")
                                .build()
                        )
                        .checkTransferDeposit(
                            Transaction.Source.CheckTransferDeposit.builder()
                                .backImageFileId("back_image_file_id")
                                .bankOfFirstDepositRoutingNumber(
                                    "bank_of_first_deposit_routing_number"
                                )
                                .depositedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .frontImageFileId("front_image_file_id")
                                .inboundCheckDepositId("inbound_check_deposit_id")
                                .transactionId("transaction_id")
                                .transferId("transfer_id")
                                .type(
                                    Transaction.Source.CheckTransferDeposit.Type
                                        .CHECK_TRANSFER_DEPOSIT
                                )
                                .build()
                        )
                        .feePayment(
                            Transaction.Source.FeePayment.builder()
                                .amount(123L)
                                .currency(Transaction.Source.FeePayment.Currency.CAD)
                                .feePeriodStart(LocalDate.parse("2019-12-27"))
                                .build()
                        )
                        .inboundAchTransfer(
                            Transaction.Source.InboundAchTransfer.builder()
                                .addenda(
                                    Transaction.Source.InboundAchTransfer.Addenda.builder()
                                        .category(
                                            Transaction.Source.InboundAchTransfer.Addenda.Category
                                                .FREEFORM
                                        )
                                        .freeform(
                                            Transaction.Source.InboundAchTransfer.Addenda.Freeform
                                                .builder()
                                                .entries(
                                                    listOf(
                                                        Transaction.Source.InboundAchTransfer
                                                            .Addenda
                                                            .Freeform
                                                            .Entry
                                                            .builder()
                                                            .paymentRelatedInformation(
                                                                "payment_related_information"
                                                            )
                                                            .build()
                                                    )
                                                )
                                                .build()
                                        )
                                        .build()
                                )
                                .amount(123L)
                                .originatorCompanyDescriptiveDate(
                                    "originator_company_descriptive_date"
                                )
                                .originatorCompanyDiscretionaryData(
                                    "originator_company_discretionary_data"
                                )
                                .originatorCompanyEntryDescription(
                                    "originator_company_entry_description"
                                )
                                .originatorCompanyId("originator_company_id")
                                .originatorCompanyName("originator_company_name")
                                .receiverIdNumber("receiver_id_number")
                                .receiverName("receiver_name")
                                .traceNumber("trace_number")
                                .transferId("transfer_id")
                                .build()
                        )
                        .inboundRealTimePaymentsTransferConfirmation(
                            Transaction.Source.InboundRealTimePaymentsTransferConfirmation.builder()
                                .amount(123L)
                                .creditorName("creditor_name")
                                .currency(
                                    Transaction.Source.InboundRealTimePaymentsTransferConfirmation
                                        .Currency
                                        .CAD
                                )
                                .debtorAccountNumber("debtor_account_number")
                                .debtorName("debtor_name")
                                .debtorRoutingNumber("debtor_routing_number")
                                .remittanceInformation("remittance_information")
                                .transactionIdentification("transaction_identification")
                                .build()
                        )
                        .inboundWireReversal(
                            Transaction.Source.InboundWireReversal.builder()
                                .amount(123L)
                                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .description("description")
                                .financialInstitutionToFinancialInstitutionInformation(
                                    "financial_institution_to_financial_institution_information"
                                )
                                .inputCycleDate(LocalDate.parse("2019-12-27"))
                                .inputMessageAccountabilityData("input_message_accountability_data")
                                .inputSequenceNumber("input_sequence_number")
                                .inputSource("input_source")
                                .originatorRoutingNumber("originator_routing_number")
                                .previousMessageInputCycleDate(LocalDate.parse("2019-12-27"))
                                .previousMessageInputMessageAccountabilityData(
                                    "previous_message_input_message_accountability_data"
                                )
                                .previousMessageInputSequenceNumber(
                                    "previous_message_input_sequence_number"
                                )
                                .previousMessageInputSource("previous_message_input_source")
                                .receiverFinancialInstitutionInformation(
                                    "receiver_financial_institution_information"
                                )
                                .senderReference("sender_reference")
                                .transactionId("transaction_id")
                                .wireTransferId("wire_transfer_id")
                                .build()
                        )
                        .inboundWireTransfer(
                            Transaction.Source.InboundWireTransfer.builder()
                                .amount(123L)
                                .beneficiaryAddressLine1("beneficiary_address_line1")
                                .beneficiaryAddressLine2("beneficiary_address_line2")
                                .beneficiaryAddressLine3("beneficiary_address_line3")
                                .beneficiaryName("beneficiary_name")
                                .beneficiaryReference("beneficiary_reference")
                                .description("description")
                                .inputMessageAccountabilityData("input_message_accountability_data")
                                .originatorAddressLine1("originator_address_line1")
                                .originatorAddressLine2("originator_address_line2")
                                .originatorAddressLine3("originator_address_line3")
                                .originatorName("originator_name")
                                .originatorRoutingNumber("originator_routing_number")
                                .originatorToBeneficiaryInformation(
                                    "originator_to_beneficiary_information"
                                )
                                .originatorToBeneficiaryInformationLine1(
                                    "originator_to_beneficiary_information_line1"
                                )
                                .originatorToBeneficiaryInformationLine2(
                                    "originator_to_beneficiary_information_line2"
                                )
                                .originatorToBeneficiaryInformationLine3(
                                    "originator_to_beneficiary_information_line3"
                                )
                                .originatorToBeneficiaryInformationLine4(
                                    "originator_to_beneficiary_information_line4"
                                )
                                .transferId("transfer_id")
                                .build()
                        )
                        .interestPayment(
                            Transaction.Source.InterestPayment.builder()
                                .accruedOnAccountId("accrued_on_account_id")
                                .amount(123L)
                                .currency(Transaction.Source.InterestPayment.Currency.CAD)
                                .periodEnd(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .periodStart(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .build()
                        )
                        .internalSource(
                            Transaction.Source.InternalSource.builder()
                                .amount(123L)
                                .currency(Transaction.Source.InternalSource.Currency.CAD)
                                .reason(Transaction.Source.InternalSource.Reason.ACCOUNT_CLOSURE)
                                .build()
                        )
                        .realTimePaymentsTransferAcknowledgement(
                            Transaction.Source.RealTimePaymentsTransferAcknowledgement.builder()
                                .amount(123L)
                                .destinationAccountNumber("destination_account_number")
                                .destinationRoutingNumber("destination_routing_number")
                                .remittanceInformation("remittance_information")
                                .transferId("transfer_id")
                                .build()
                        )
                        .sampleFunds(
                            Transaction.Source.SampleFunds.builder()
                                .originator("originator")
                                .build()
                        )
                        .wireTransferIntention(
                            Transaction.Source.WireTransferIntention.builder()
                                .accountNumber("account_number")
                                .amount(123L)
                                .messageToRecipient("message_to_recipient")
                                .routingNumber("routing_number")
                                .transferId("transfer_id")
                                .build()
                        )
                        .wireTransferRejection(
                            Transaction.Source.WireTransferRejection.builder()
                                .transferId("transfer_id")
                                .build()
                        )
                        .build()
                )
                .type(Transaction.Type.TRANSACTION)
                .build()
        assertThat(transaction).isNotNull
        assertThat(transaction.id()).isEqualTo("id")
        assertThat(transaction.accountId()).isEqualTo("account_id")
        assertThat(transaction.amount()).isEqualTo(123L)
        assertThat(transaction.createdAt())
            .isEqualTo(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(transaction.currency()).isEqualTo(Transaction.Currency.CAD)
        assertThat(transaction.description()).isEqualTo("description")
        assertThat(transaction.routeId()).isEqualTo("route_id")
        assertThat(transaction.routeType()).isEqualTo(Transaction.RouteType.ACCOUNT_NUMBER)
        assertThat(transaction.source())
            .isEqualTo(
                Transaction.Source.builder()
                    .accountTransferIntention(
                        Transaction.Source.AccountTransferIntention.builder()
                            .amount(123L)
                            .currency(Transaction.Source.AccountTransferIntention.Currency.CAD)
                            .description("description")
                            .destinationAccountId("destination_account_id")
                            .sourceAccountId("source_account_id")
                            .transferId("transfer_id")
                            .build()
                    )
                    .achTransferIntention(
                        Transaction.Source.AchTransferIntention.builder()
                            .accountNumber("account_number")
                            .amount(123L)
                            .routingNumber("routing_number")
                            .statementDescriptor("statement_descriptor")
                            .transferId("transfer_id")
                            .build()
                    )
                    .achTransferRejection(
                        Transaction.Source.AchTransferRejection.builder()
                            .transferId("transfer_id")
                            .build()
                    )
                    .achTransferReturn(
                        Transaction.Source.AchTransferReturn.builder()
                            .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .rawReturnReasonCode("raw_return_reason_code")
                            .returnReasonCode(
                                Transaction.Source.AchTransferReturn.ReturnReasonCode
                                    .INSUFFICIENT_FUND
                            )
                            .traceNumber("trace_number")
                            .transactionId("transaction_id")
                            .transferId("transfer_id")
                            .build()
                    )
                    .cardDisputeAcceptance(
                        Transaction.Source.CardDisputeAcceptance.builder()
                            .acceptedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .cardDisputeId("card_dispute_id")
                            .transactionId("transaction_id")
                            .build()
                    )
                    .cardDisputeLoss(
                        Transaction.Source.CardDisputeLoss.builder()
                            .cardDisputeId("card_dispute_id")
                            .explanation("explanation")
                            .lostAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .transactionId("transaction_id")
                            .build()
                    )
                    .cardRefund(
                        Transaction.Source.CardRefund.builder()
                            .id("id")
                            .amount(123L)
                            .cardPaymentId("card_payment_id")
                            .currency(Transaction.Source.CardRefund.Currency.CAD)
                            .merchantAcceptorId("merchant_acceptor_id")
                            .merchantCategoryCode("merchant_category_code")
                            .merchantCity("merchant_city")
                            .merchantCountry("merchant_country")
                            .merchantName("merchant_name")
                            .merchantState("merchant_state")
                            .networkIdentifiers(
                                Transaction.Source.CardRefund.NetworkIdentifiers.builder()
                                    .acquirerBusinessId("acquirer_business_id")
                                    .acquirerReferenceNumber("acquirer_reference_number")
                                    .transactionId("transaction_id")
                                    .build()
                            )
                            .presentmentAmount(123L)
                            .presentmentCurrency("presentment_currency")
                            .purchaseDetails(
                                Transaction.Source.CardRefund.PurchaseDetails.builder()
                                    .carRental(
                                        Transaction.Source.CardRefund.PurchaseDetails.CarRental
                                            .builder()
                                            .carClassCode("car_class_code")
                                            .checkoutDate(LocalDate.parse("2019-12-27"))
                                            .dailyRentalRateAmount(123L)
                                            .dailyRentalRateCurrency("daily_rental_rate_currency")
                                            .daysRented(123L)
                                            .extraCharges(
                                                Transaction.Source.CardRefund.PurchaseDetails
                                                    .CarRental
                                                    .ExtraCharges
                                                    .NO_EXTRA_CHARGE
                                            )
                                            .fuelChargesAmount(123L)
                                            .fuelChargesCurrency("fuel_charges_currency")
                                            .insuranceChargesAmount(123L)
                                            .insuranceChargesCurrency("insurance_charges_currency")
                                            .noShowIndicator(
                                                Transaction.Source.CardRefund.PurchaseDetails
                                                    .CarRental
                                                    .NoShowIndicator
                                                    .NOT_APPLICABLE
                                            )
                                            .oneWayDropOffChargesAmount(123L)
                                            .oneWayDropOffChargesCurrency(
                                                "one_way_drop_off_charges_currency"
                                            )
                                            .renterName("renter_name")
                                            .weeklyRentalRateAmount(123L)
                                            .weeklyRentalRateCurrency("weekly_rental_rate_currency")
                                            .build()
                                    )
                                    .customerReferenceIdentifier("customer_reference_identifier")
                                    .localTaxAmount(123L)
                                    .localTaxCurrency("local_tax_currency")
                                    .lodging(
                                        Transaction.Source.CardRefund.PurchaseDetails.Lodging
                                            .builder()
                                            .checkInDate(LocalDate.parse("2019-12-27"))
                                            .dailyRoomRateAmount(123L)
                                            .dailyRoomRateCurrency("daily_room_rate_currency")
                                            .extraCharges(
                                                Transaction.Source.CardRefund.PurchaseDetails
                                                    .Lodging
                                                    .ExtraCharges
                                                    .NO_EXTRA_CHARGE
                                            )
                                            .folioCashAdvancesAmount(123L)
                                            .folioCashAdvancesCurrency(
                                                "folio_cash_advances_currency"
                                            )
                                            .foodBeverageChargesAmount(123L)
                                            .foodBeverageChargesCurrency(
                                                "food_beverage_charges_currency"
                                            )
                                            .noShowIndicator(
                                                Transaction.Source.CardRefund.PurchaseDetails
                                                    .Lodging
                                                    .NoShowIndicator
                                                    .NOT_APPLICABLE
                                            )
                                            .prepaidExpensesAmount(123L)
                                            .prepaidExpensesCurrency("prepaid_expenses_currency")
                                            .roomNights(123L)
                                            .totalRoomTaxAmount(123L)
                                            .totalRoomTaxCurrency("total_room_tax_currency")
                                            .totalTaxAmount(123L)
                                            .totalTaxCurrency("total_tax_currency")
                                            .build()
                                    )
                                    .nationalTaxAmount(123L)
                                    .nationalTaxCurrency("national_tax_currency")
                                    .purchaseIdentifier("purchase_identifier")
                                    .purchaseIdentifierFormat(
                                        Transaction.Source.CardRefund.PurchaseDetails
                                            .PurchaseIdentifierFormat
                                            .FREE_TEXT
                                    )
                                    .travel(
                                        Transaction.Source.CardRefund.PurchaseDetails.Travel
                                            .builder()
                                            .ancillary(
                                                Transaction.Source.CardRefund.PurchaseDetails.Travel
                                                    .Ancillary
                                                    .builder()
                                                    .connectedTicketDocumentNumber(
                                                        "connected_ticket_document_number"
                                                    )
                                                    .creditReasonIndicator(
                                                        Transaction.Source.CardRefund
                                                            .PurchaseDetails
                                                            .Travel
                                                            .Ancillary
                                                            .CreditReasonIndicator
                                                            .NO_CREDIT
                                                    )
                                                    .passengerNameOrDescription(
                                                        "passenger_name_or_description"
                                                    )
                                                    .services(
                                                        listOf(
                                                            Transaction.Source.CardRefund
                                                                .PurchaseDetails
                                                                .Travel
                                                                .Ancillary
                                                                .Service
                                                                .builder()
                                                                .category(
                                                                    Transaction.Source.CardRefund
                                                                        .PurchaseDetails
                                                                        .Travel
                                                                        .Ancillary
                                                                        .Service
                                                                        .Category
                                                                        .NONE
                                                                )
                                                                .subCategory("sub_category")
                                                                .build()
                                                        )
                                                    )
                                                    .ticketDocumentNumber("ticket_document_number")
                                                    .build()
                                            )
                                            .computerizedReservationSystem(
                                                "computerized_reservation_system"
                                            )
                                            .creditReasonIndicator(
                                                Transaction.Source.CardRefund.PurchaseDetails.Travel
                                                    .CreditReasonIndicator
                                                    .NO_CREDIT
                                            )
                                            .departureDate(LocalDate.parse("2019-12-27"))
                                            .originationCityAirportCode(
                                                "origination_city_airport_code"
                                            )
                                            .passengerName("passenger_name")
                                            .restrictedTicketIndicator(
                                                Transaction.Source.CardRefund.PurchaseDetails.Travel
                                                    .RestrictedTicketIndicator
                                                    .NO_RESTRICTIONS
                                            )
                                            .ticketChangeIndicator(
                                                Transaction.Source.CardRefund.PurchaseDetails.Travel
                                                    .TicketChangeIndicator
                                                    .NONE
                                            )
                                            .ticketNumber("ticket_number")
                                            .travelAgencyCode("travel_agency_code")
                                            .travelAgencyName("travel_agency_name")
                                            .tripLegs(
                                                listOf(
                                                    Transaction.Source.CardRefund.PurchaseDetails
                                                        .Travel
                                                        .TripLeg
                                                        .builder()
                                                        .carrierCode("carrier_code")
                                                        .destinationCityAirportCode(
                                                            "destination_city_airport_code"
                                                        )
                                                        .fareBasisCode("fare_basis_code")
                                                        .flightNumber("flight_number")
                                                        .serviceClass("service_class")
                                                        .stopOverCode(
                                                            Transaction.Source.CardRefund
                                                                .PurchaseDetails
                                                                .Travel
                                                                .TripLeg
                                                                .StopOverCode
                                                                .NONE
                                                        )
                                                        .build()
                                                )
                                            )
                                            .build()
                                    )
                                    .build()
                            )
                            .transactionId("transaction_id")
                            .type(Transaction.Source.CardRefund.Type.CARD_REFUND)
                            .build()
                    )
                    .cardRevenuePayment(
                        Transaction.Source.CardRevenuePayment.builder()
                            .amount(123L)
                            .currency(Transaction.Source.CardRevenuePayment.Currency.CAD)
                            .periodEnd(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .periodStart(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .transactedOnAccountId("transacted_on_account_id")
                            .build()
                    )
                    .cardSettlement(
                        Transaction.Source.CardSettlement.builder()
                            .id("id")
                            .amount(123L)
                            .cardAuthorization("card_authorization")
                            .cardPaymentId("card_payment_id")
                            .currency(Transaction.Source.CardSettlement.Currency.CAD)
                            .merchantAcceptorId("merchant_acceptor_id")
                            .merchantCategoryCode("merchant_category_code")
                            .merchantCity("merchant_city")
                            .merchantCountry("merchant_country")
                            .merchantName("merchant_name")
                            .merchantState("merchant_state")
                            .networkIdentifiers(
                                Transaction.Source.CardSettlement.NetworkIdentifiers.builder()
                                    .acquirerBusinessId("acquirer_business_id")
                                    .acquirerReferenceNumber("acquirer_reference_number")
                                    .transactionId("transaction_id")
                                    .build()
                            )
                            .pendingTransactionId("pending_transaction_id")
                            .presentmentAmount(123L)
                            .presentmentCurrency("presentment_currency")
                            .purchaseDetails(
                                Transaction.Source.CardSettlement.PurchaseDetails.builder()
                                    .carRental(
                                        Transaction.Source.CardSettlement.PurchaseDetails.CarRental
                                            .builder()
                                            .carClassCode("car_class_code")
                                            .checkoutDate(LocalDate.parse("2019-12-27"))
                                            .dailyRentalRateAmount(123L)
                                            .dailyRentalRateCurrency("daily_rental_rate_currency")
                                            .daysRented(123L)
                                            .extraCharges(
                                                Transaction.Source.CardSettlement.PurchaseDetails
                                                    .CarRental
                                                    .ExtraCharges
                                                    .NO_EXTRA_CHARGE
                                            )
                                            .fuelChargesAmount(123L)
                                            .fuelChargesCurrency("fuel_charges_currency")
                                            .insuranceChargesAmount(123L)
                                            .insuranceChargesCurrency("insurance_charges_currency")
                                            .noShowIndicator(
                                                Transaction.Source.CardSettlement.PurchaseDetails
                                                    .CarRental
                                                    .NoShowIndicator
                                                    .NOT_APPLICABLE
                                            )
                                            .oneWayDropOffChargesAmount(123L)
                                            .oneWayDropOffChargesCurrency(
                                                "one_way_drop_off_charges_currency"
                                            )
                                            .renterName("renter_name")
                                            .weeklyRentalRateAmount(123L)
                                            .weeklyRentalRateCurrency("weekly_rental_rate_currency")
                                            .build()
                                    )
                                    .customerReferenceIdentifier("customer_reference_identifier")
                                    .localTaxAmount(123L)
                                    .localTaxCurrency("local_tax_currency")
                                    .lodging(
                                        Transaction.Source.CardSettlement.PurchaseDetails.Lodging
                                            .builder()
                                            .checkInDate(LocalDate.parse("2019-12-27"))
                                            .dailyRoomRateAmount(123L)
                                            .dailyRoomRateCurrency("daily_room_rate_currency")
                                            .extraCharges(
                                                Transaction.Source.CardSettlement.PurchaseDetails
                                                    .Lodging
                                                    .ExtraCharges
                                                    .NO_EXTRA_CHARGE
                                            )
                                            .folioCashAdvancesAmount(123L)
                                            .folioCashAdvancesCurrency(
                                                "folio_cash_advances_currency"
                                            )
                                            .foodBeverageChargesAmount(123L)
                                            .foodBeverageChargesCurrency(
                                                "food_beverage_charges_currency"
                                            )
                                            .noShowIndicator(
                                                Transaction.Source.CardSettlement.PurchaseDetails
                                                    .Lodging
                                                    .NoShowIndicator
                                                    .NOT_APPLICABLE
                                            )
                                            .prepaidExpensesAmount(123L)
                                            .prepaidExpensesCurrency("prepaid_expenses_currency")
                                            .roomNights(123L)
                                            .totalRoomTaxAmount(123L)
                                            .totalRoomTaxCurrency("total_room_tax_currency")
                                            .totalTaxAmount(123L)
                                            .totalTaxCurrency("total_tax_currency")
                                            .build()
                                    )
                                    .nationalTaxAmount(123L)
                                    .nationalTaxCurrency("national_tax_currency")
                                    .purchaseIdentifier("purchase_identifier")
                                    .purchaseIdentifierFormat(
                                        Transaction.Source.CardSettlement.PurchaseDetails
                                            .PurchaseIdentifierFormat
                                            .FREE_TEXT
                                    )
                                    .travel(
                                        Transaction.Source.CardSettlement.PurchaseDetails.Travel
                                            .builder()
                                            .ancillary(
                                                Transaction.Source.CardSettlement.PurchaseDetails
                                                    .Travel
                                                    .Ancillary
                                                    .builder()
                                                    .connectedTicketDocumentNumber(
                                                        "connected_ticket_document_number"
                                                    )
                                                    .creditReasonIndicator(
                                                        Transaction.Source.CardSettlement
                                                            .PurchaseDetails
                                                            .Travel
                                                            .Ancillary
                                                            .CreditReasonIndicator
                                                            .NO_CREDIT
                                                    )
                                                    .passengerNameOrDescription(
                                                        "passenger_name_or_description"
                                                    )
                                                    .services(
                                                        listOf(
                                                            Transaction.Source.CardSettlement
                                                                .PurchaseDetails
                                                                .Travel
                                                                .Ancillary
                                                                .Service
                                                                .builder()
                                                                .category(
                                                                    Transaction.Source
                                                                        .CardSettlement
                                                                        .PurchaseDetails
                                                                        .Travel
                                                                        .Ancillary
                                                                        .Service
                                                                        .Category
                                                                        .NONE
                                                                )
                                                                .subCategory("sub_category")
                                                                .build()
                                                        )
                                                    )
                                                    .ticketDocumentNumber("ticket_document_number")
                                                    .build()
                                            )
                                            .computerizedReservationSystem(
                                                "computerized_reservation_system"
                                            )
                                            .creditReasonIndicator(
                                                Transaction.Source.CardSettlement.PurchaseDetails
                                                    .Travel
                                                    .CreditReasonIndicator
                                                    .NO_CREDIT
                                            )
                                            .departureDate(LocalDate.parse("2019-12-27"))
                                            .originationCityAirportCode(
                                                "origination_city_airport_code"
                                            )
                                            .passengerName("passenger_name")
                                            .restrictedTicketIndicator(
                                                Transaction.Source.CardSettlement.PurchaseDetails
                                                    .Travel
                                                    .RestrictedTicketIndicator
                                                    .NO_RESTRICTIONS
                                            )
                                            .ticketChangeIndicator(
                                                Transaction.Source.CardSettlement.PurchaseDetails
                                                    .Travel
                                                    .TicketChangeIndicator
                                                    .NONE
                                            )
                                            .ticketNumber("ticket_number")
                                            .travelAgencyCode("travel_agency_code")
                                            .travelAgencyName("travel_agency_name")
                                            .tripLegs(
                                                listOf(
                                                    Transaction.Source.CardSettlement
                                                        .PurchaseDetails
                                                        .Travel
                                                        .TripLeg
                                                        .builder()
                                                        .carrierCode("carrier_code")
                                                        .destinationCityAirportCode(
                                                            "destination_city_airport_code"
                                                        )
                                                        .fareBasisCode("fare_basis_code")
                                                        .flightNumber("flight_number")
                                                        .serviceClass("service_class")
                                                        .stopOverCode(
                                                            Transaction.Source.CardSettlement
                                                                .PurchaseDetails
                                                                .Travel
                                                                .TripLeg
                                                                .StopOverCode
                                                                .NONE
                                                        )
                                                        .build()
                                                )
                                            )
                                            .build()
                                    )
                                    .build()
                            )
                            .transactionId("transaction_id")
                            .type(Transaction.Source.CardSettlement.Type.CARD_SETTLEMENT)
                            .build()
                    )
                    .cashbackPayment(
                        Transaction.Source.CashbackPayment.builder()
                            .accruedOnCardId("accrued_on_card_id")
                            .amount(123L)
                            .currency(Transaction.Source.CashbackPayment.Currency.CAD)
                            .periodEnd(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .periodStart(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .build()
                    )
                    .category(Transaction.Source.Category.ACCOUNT_TRANSFER_INTENTION)
                    .checkDepositAcceptance(
                        Transaction.Source.CheckDepositAcceptance.builder()
                            .accountNumber("account_number")
                            .amount(123L)
                            .auxiliaryOnUs("auxiliary_on_us")
                            .checkDepositId("check_deposit_id")
                            .currency(Transaction.Source.CheckDepositAcceptance.Currency.CAD)
                            .routingNumber("routing_number")
                            .serialNumber("serial_number")
                            .build()
                    )
                    .checkDepositReturn(
                        Transaction.Source.CheckDepositReturn.builder()
                            .amount(123L)
                            .checkDepositId("check_deposit_id")
                            .currency(Transaction.Source.CheckDepositReturn.Currency.CAD)
                            .returnReason(
                                Transaction.Source.CheckDepositReturn.ReturnReason
                                    .ACH_CONVERSION_NOT_SUPPORTED
                            )
                            .returnedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .transactionId("transaction_id")
                            .build()
                    )
                    .checkTransferDeposit(
                        Transaction.Source.CheckTransferDeposit.builder()
                            .backImageFileId("back_image_file_id")
                            .bankOfFirstDepositRoutingNumber("bank_of_first_deposit_routing_number")
                            .depositedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .frontImageFileId("front_image_file_id")
                            .inboundCheckDepositId("inbound_check_deposit_id")
                            .transactionId("transaction_id")
                            .transferId("transfer_id")
                            .type(
                                Transaction.Source.CheckTransferDeposit.Type.CHECK_TRANSFER_DEPOSIT
                            )
                            .build()
                    )
                    .feePayment(
                        Transaction.Source.FeePayment.builder()
                            .amount(123L)
                            .currency(Transaction.Source.FeePayment.Currency.CAD)
                            .feePeriodStart(LocalDate.parse("2019-12-27"))
                            .build()
                    )
                    .inboundAchTransfer(
                        Transaction.Source.InboundAchTransfer.builder()
                            .addenda(
                                Transaction.Source.InboundAchTransfer.Addenda.builder()
                                    .category(
                                        Transaction.Source.InboundAchTransfer.Addenda.Category
                                            .FREEFORM
                                    )
                                    .freeform(
                                        Transaction.Source.InboundAchTransfer.Addenda.Freeform
                                            .builder()
                                            .entries(
                                                listOf(
                                                    Transaction.Source.InboundAchTransfer.Addenda
                                                        .Freeform
                                                        .Entry
                                                        .builder()
                                                        .paymentRelatedInformation(
                                                            "payment_related_information"
                                                        )
                                                        .build()
                                                )
                                            )
                                            .build()
                                    )
                                    .build()
                            )
                            .amount(123L)
                            .originatorCompanyDescriptiveDate("originator_company_descriptive_date")
                            .originatorCompanyDiscretionaryData(
                                "originator_company_discretionary_data"
                            )
                            .originatorCompanyEntryDescription(
                                "originator_company_entry_description"
                            )
                            .originatorCompanyId("originator_company_id")
                            .originatorCompanyName("originator_company_name")
                            .receiverIdNumber("receiver_id_number")
                            .receiverName("receiver_name")
                            .traceNumber("trace_number")
                            .transferId("transfer_id")
                            .build()
                    )
                    .inboundRealTimePaymentsTransferConfirmation(
                        Transaction.Source.InboundRealTimePaymentsTransferConfirmation.builder()
                            .amount(123L)
                            .creditorName("creditor_name")
                            .currency(
                                Transaction.Source.InboundRealTimePaymentsTransferConfirmation
                                    .Currency
                                    .CAD
                            )
                            .debtorAccountNumber("debtor_account_number")
                            .debtorName("debtor_name")
                            .debtorRoutingNumber("debtor_routing_number")
                            .remittanceInformation("remittance_information")
                            .transactionIdentification("transaction_identification")
                            .build()
                    )
                    .inboundWireReversal(
                        Transaction.Source.InboundWireReversal.builder()
                            .amount(123L)
                            .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .description("description")
                            .financialInstitutionToFinancialInstitutionInformation(
                                "financial_institution_to_financial_institution_information"
                            )
                            .inputCycleDate(LocalDate.parse("2019-12-27"))
                            .inputMessageAccountabilityData("input_message_accountability_data")
                            .inputSequenceNumber("input_sequence_number")
                            .inputSource("input_source")
                            .originatorRoutingNumber("originator_routing_number")
                            .previousMessageInputCycleDate(LocalDate.parse("2019-12-27"))
                            .previousMessageInputMessageAccountabilityData(
                                "previous_message_input_message_accountability_data"
                            )
                            .previousMessageInputSequenceNumber(
                                "previous_message_input_sequence_number"
                            )
                            .previousMessageInputSource("previous_message_input_source")
                            .receiverFinancialInstitutionInformation(
                                "receiver_financial_institution_information"
                            )
                            .senderReference("sender_reference")
                            .transactionId("transaction_id")
                            .wireTransferId("wire_transfer_id")
                            .build()
                    )
                    .inboundWireTransfer(
                        Transaction.Source.InboundWireTransfer.builder()
                            .amount(123L)
                            .beneficiaryAddressLine1("beneficiary_address_line1")
                            .beneficiaryAddressLine2("beneficiary_address_line2")
                            .beneficiaryAddressLine3("beneficiary_address_line3")
                            .beneficiaryName("beneficiary_name")
                            .beneficiaryReference("beneficiary_reference")
                            .description("description")
                            .inputMessageAccountabilityData("input_message_accountability_data")
                            .originatorAddressLine1("originator_address_line1")
                            .originatorAddressLine2("originator_address_line2")
                            .originatorAddressLine3("originator_address_line3")
                            .originatorName("originator_name")
                            .originatorRoutingNumber("originator_routing_number")
                            .originatorToBeneficiaryInformation(
                                "originator_to_beneficiary_information"
                            )
                            .originatorToBeneficiaryInformationLine1(
                                "originator_to_beneficiary_information_line1"
                            )
                            .originatorToBeneficiaryInformationLine2(
                                "originator_to_beneficiary_information_line2"
                            )
                            .originatorToBeneficiaryInformationLine3(
                                "originator_to_beneficiary_information_line3"
                            )
                            .originatorToBeneficiaryInformationLine4(
                                "originator_to_beneficiary_information_line4"
                            )
                            .transferId("transfer_id")
                            .build()
                    )
                    .interestPayment(
                        Transaction.Source.InterestPayment.builder()
                            .accruedOnAccountId("accrued_on_account_id")
                            .amount(123L)
                            .currency(Transaction.Source.InterestPayment.Currency.CAD)
                            .periodEnd(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .periodStart(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .build()
                    )
                    .internalSource(
                        Transaction.Source.InternalSource.builder()
                            .amount(123L)
                            .currency(Transaction.Source.InternalSource.Currency.CAD)
                            .reason(Transaction.Source.InternalSource.Reason.ACCOUNT_CLOSURE)
                            .build()
                    )
                    .realTimePaymentsTransferAcknowledgement(
                        Transaction.Source.RealTimePaymentsTransferAcknowledgement.builder()
                            .amount(123L)
                            .destinationAccountNumber("destination_account_number")
                            .destinationRoutingNumber("destination_routing_number")
                            .remittanceInformation("remittance_information")
                            .transferId("transfer_id")
                            .build()
                    )
                    .sampleFunds(
                        Transaction.Source.SampleFunds.builder().originator("originator").build()
                    )
                    .wireTransferIntention(
                        Transaction.Source.WireTransferIntention.builder()
                            .accountNumber("account_number")
                            .amount(123L)
                            .messageToRecipient("message_to_recipient")
                            .routingNumber("routing_number")
                            .transferId("transfer_id")
                            .build()
                    )
                    .wireTransferRejection(
                        Transaction.Source.WireTransferRejection.builder()
                            .transferId("transfer_id")
                            .build()
                    )
                    .build()
            )
        assertThat(transaction.type()).isEqualTo(Transaction.Type.TRANSACTION)
    }
}
