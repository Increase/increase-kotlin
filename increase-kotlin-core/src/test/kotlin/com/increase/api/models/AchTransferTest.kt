package com.increase.api.models

import java.time.LocalDate
import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

class AchTransferTest {

    @Test
    fun createAchTransfer() {
        val achTransfer =
            AchTransfer.builder()
                .id("string")
                .accountId("string")
                .accountNumber("string")
                .addendum("string")
                .amount(123L)
                .approval(
                    AchTransfer.Approval.builder()
                        .approvedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .approvedBy("string")
                        .build()
                )
                .cancellation(
                    AchTransfer.Cancellation.builder()
                        .canceledAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .canceledBy("string")
                        .build()
                )
                .companyDescriptiveDate("string")
                .companyDiscretionaryData("string")
                .companyEntryDescription("string")
                .companyName("string")
                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .currency(AchTransfer.Currency.CAD)
                .effectiveDate(LocalDate.parse("2019-12-27"))
                .externalAccountId("string")
                .funding(AchTransfer.Funding.CHECKING)
                .individualId("string")
                .individualName("string")
                .network(AchTransfer.Network.ACH)
                .notificationsOfChange(
                    listOf(
                        AchTransfer.NotificationsOfChange.builder()
                            .changeCode(
                                AchTransfer.NotificationsOfChange.ChangeCode
                                    .INCORRECT_ACCOUNT_NUMBER
                            )
                            .correctedData("string")
                            .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .build()
                    )
                )
                .return_(
                    AchTransfer.Return.builder()
                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .rawReturnReasonCode("string")
                        .returnReasonCode(AchTransfer.Return.ReturnReasonCode.INSUFFICIENT_FUND)
                        .transactionId("string")
                        .transferId("string")
                        .build()
                )
                .routingNumber("string")
                .standardEntryClassCode(
                    AchTransfer.StandardEntryClassCode.CORPORATE_CREDIT_OR_DEBIT
                )
                .statementDescriptor("string")
                .status(AchTransfer.Status.PENDING_APPROVAL)
                .submission(
                    AchTransfer.Submission.builder()
                        .submittedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .traceNumber("string")
                        .build()
                )
                .transactionId("string")
                .type(AchTransfer.Type.ACH_TRANSFER)
                .uniqueIdentifier("string")
                .build()
        assertThat(achTransfer).isNotNull
        assertThat(achTransfer.id()).isEqualTo("string")
        assertThat(achTransfer.accountId()).isEqualTo("string")
        assertThat(achTransfer.accountNumber()).isEqualTo("string")
        assertThat(achTransfer.addendum()).isEqualTo("string")
        assertThat(achTransfer.amount()).isEqualTo(123L)
        assertThat(achTransfer.approval())
            .isEqualTo(
                AchTransfer.Approval.builder()
                    .approvedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .approvedBy("string")
                    .build()
            )
        assertThat(achTransfer.cancellation())
            .isEqualTo(
                AchTransfer.Cancellation.builder()
                    .canceledAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .canceledBy("string")
                    .build()
            )
        assertThat(achTransfer.companyDescriptiveDate()).isEqualTo("string")
        assertThat(achTransfer.companyDiscretionaryData()).isEqualTo("string")
        assertThat(achTransfer.companyEntryDescription()).isEqualTo("string")
        assertThat(achTransfer.companyName()).isEqualTo("string")
        assertThat(achTransfer.createdAt())
            .isEqualTo(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(achTransfer.currency()).isEqualTo(AchTransfer.Currency.CAD)
        assertThat(achTransfer.effectiveDate()).isEqualTo(LocalDate.parse("2019-12-27"))
        assertThat(achTransfer.externalAccountId()).isEqualTo("string")
        assertThat(achTransfer.funding()).isEqualTo(AchTransfer.Funding.CHECKING)
        assertThat(achTransfer.individualId()).isEqualTo("string")
        assertThat(achTransfer.individualName()).isEqualTo("string")
        assertThat(achTransfer.network()).isEqualTo(AchTransfer.Network.ACH)
        assertThat(achTransfer.notificationsOfChange())
            .containsExactly(
                AchTransfer.NotificationsOfChange.builder()
                    .changeCode(
                        AchTransfer.NotificationsOfChange.ChangeCode.INCORRECT_ACCOUNT_NUMBER
                    )
                    .correctedData("string")
                    .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .build()
            )
        assertThat(achTransfer.return_())
            .isEqualTo(
                AchTransfer.Return.builder()
                    .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .rawReturnReasonCode("string")
                    .returnReasonCode(AchTransfer.Return.ReturnReasonCode.INSUFFICIENT_FUND)
                    .transactionId("string")
                    .transferId("string")
                    .build()
            )
        assertThat(achTransfer.routingNumber()).isEqualTo("string")
        assertThat(achTransfer.standardEntryClassCode())
            .isEqualTo(AchTransfer.StandardEntryClassCode.CORPORATE_CREDIT_OR_DEBIT)
        assertThat(achTransfer.statementDescriptor()).isEqualTo("string")
        assertThat(achTransfer.status()).isEqualTo(AchTransfer.Status.PENDING_APPROVAL)
        assertThat(achTransfer.submission())
            .isEqualTo(
                AchTransfer.Submission.builder()
                    .submittedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .traceNumber("string")
                    .build()
            )
        assertThat(achTransfer.transactionId()).isEqualTo("string")
        assertThat(achTransfer.type()).isEqualTo(AchTransfer.Type.ACH_TRANSFER)
        assertThat(achTransfer.uniqueIdentifier()).isEqualTo("string")
    }
}
